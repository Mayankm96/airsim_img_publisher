<!--
  Example launch file for octomap_server mapping:
  Listens to incoming PointCloud2 data and incrementally builds an octomap.
  The data is sent out in different representations.

  Copy this file into your workspace and adjust as needed, see
  www.ros.org/wiki/octomap_server for details
-->
<launch>
	<node pkg="octomap_server" type="octomap_server_node" name="octomap_server">
		<param name="resolution" value="0.5" />

		<!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
		<param name="frame_id" type="string" value="world" />

		<!-- maximum range to integrate (speedup!) -->
		<param name="sensor_model/max_range" value="200" />

		<!-- data source to integrate (PointCloud2) -->
		<remap from="cloud_in" to="/points" />

		<!-- Filter ground for binary occupancy map -->
		<param name="base_frame_id" value="world" />

		<!-- <param name="filter_ground" value="true" />
		<param name="ground_filter_plane_distance" value="1.00" />
		<param name="ground_filter/distance" value="0.50" /> -->
    <param name="pointcloud_min_z" type="double" value="-2.0" />
    <param name="pointcloud_max_z" type="double" value="100.0" />
    <param name="occupancy_min_z" type="double" value="-2.00" />
    <param name="occupancy_max_z" type="double" value="100.0" />

		<!-- <param name="ground_filter_plane_distance" value="0.07" />
		<param name="ground_filter/distance" value="0.04" />
		<param name="ground_filter/angle" value="0.4" /> -->

	</node>
</launch>
